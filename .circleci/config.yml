version: 2.1

orbs:
  # The python orb contains a set of prepackaged circleci configuration you can use repeatedly in your configurations files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  node: circleci/node@4.1.0

workflows:
  graphery-build:  # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run. 
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows 
    jobs:
      - build-backend
      - build-frontend 


jobs:
  build-backend:  # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python
    working_directory: ~/Graphery/backend
    docker:
      - image: cimg/python:3.9
      - image: circleci/postgres:13-postgis-ram
        environment: 
          POSTGRES_USER: graphery
          POSTGRES_PASSWORD: graphery
          POSTGRES_DB: graphery 
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout:
          path: ~/Graphery
      - python/install-packages:
          pkg-manager: pipenv
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run: 
          command: pipenv install -d
      - run: 
          name: Bundle Test 
          command: cd ./bundle && pipenv run pytest -vv -ra -s
      - run: 
          name: Server Test 
          command: cd ./server && pipenv run pytest -vv -ra -s
          environment:
            GRAPHERY_NORMAL_LOG_PATH: graphery_normal.log
            GRAPHERY_EXECUTION_LOG_PATH: graphery_execution.log
            GRAPHERY_API_LOG_PATH: graphery_api.log
    environment:
      PIPENV_IGNORE_VIRTUALENVS: 1
 
  build-frontend:
    working_directory: ~/Graphery/graphery
    docker: 
      - image: cimg/python:3.9.1-node
    steps:
      - checkout:
          path: ~/Graphery
      # - restore_cache:
      #     name: Restore Yarn Package Cache
      #     keys:
      #       - yarn-packages-{{ checksum "yarn.lock" }}
      - node/install-packages:
          pkg-manager: yarn
      # - run:
      #     name: Install Dependencies
      #     command: yarn install --immutable
      # - save_cache:
      #     name: Save Yarn Package Cache
      #     key: yarn-packages-{{ checksum "yarn.lock" }}
      #     paths:
      #       - ~/.cache/yarn
      - run: 
          name: Build Frontend 
          command: yarn run build 

